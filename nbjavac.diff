diff --git a/StripModuleHashes.java b/StripModuleHashes.java
new file mode 100644
index 0000000..1973d96
--- /dev/null
+++ b/StripModuleHashes.java
@@ -0,0 +1,49 @@
+import com.sun.tools.classfile.Attribute;
+import com.sun.tools.classfile.Attributes;
+import com.sun.tools.classfile.ClassFile;
+import com.sun.tools.classfile.ClassWriter;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.util.HashMap;
+import java.util.jar.JarInputStream;
+import java.util.jar.JarOutputStream;
+import java.util.zip.ZipEntry;
+
+public class StripModuleHashes {
+
+    public static void main(String[] args) throws Exception {
+        try (InputStream in = new FileInputStream(args[0]);
+             OutputStream out = new FileOutputStream(args[1])) {
+            out.write(in.read());//J
+            out.write(in.read());//M
+            out.write(in.read());//major version
+            out.write(in.read());//minor version
+            try (JarInputStream jis = new JarInputStream(in);
+                 JarOutputStream jos = new JarOutputStream(out)) {
+                ZipEntry e;
+                while ((e = jis.getNextEntry()) != null) {
+                    jos.putNextEntry(e);
+
+                    if (e.getName().endsWith("/module-info.class")) {
+                        ClassFile cf = ClassFile.read(jis);
+                        Attributes attrs = cf.attributes;
+                        HashMap<String, Attribute> newAttrs = new HashMap<>(attrs.map);
+                        newAttrs.remove(Attribute.ModuleHashes);
+                        ClassFile newCF = new ClassFile(cf.magic, cf.minor_version, cf.major_version, cf.constant_pool, cf.access_flags, cf.this_class, cf.super_class, cf.interfaces, cf.fields, cf.methods, new Attributes(newAttrs));
+                        new ClassWriter().write(newCF, jos);
+                    } else {
+                        int read;
+                        
+                        while ((read = jis.read()) != (-1)) {
+                            jos.write(read);
+                        }
+                    }
+                }
+            }
+        }
+    }
+    
+}
diff --git a/build-jdk.sh b/build-jdk.sh
new file mode 100644
index 0000000..5d629ce
--- /dev/null
+++ b/build-jdk.sh
@@ -0,0 +1,41 @@
+BOOT_JAVA_HOME=/home/langtools/jdks/jdk-14
+if ! [ -f $BOOT_JAVA_HOME/bin/javac ]; then
+  echo Specify BOOT_JAVA_HOME environment variable!
+  exit 1
+fi
+
+rm -rf build/test
+mkdir -p build/test
+mkdir -p build/test/modules
+cp $BOOT_JAVA_HOME/jmods/* build/test/modules
+#clear ModuleHashes on java.base:
+$BOOT_JAVA_HOME/bin/java --add-modules jdk.jdeps --add-exports jdk.jdeps/com.sun.tools.classfile=ALL-UNNAMED StripModuleHashes.java $BOOT_JAVA_HOME/jmods/java.base.jmod build/test/modules/java.base.jmod
+rm build/test/modules/java.compiler.jmod
+rm build/test/modules/jdk.compiler.jmod
+
+mkdir -p build/test/src/java.compiler
+cp src/java.compiler/share/classes/module-info.java build/test/src/java.compiler
+
+mkdir -p build/test/src/jdk.compiler
+cp src/jdk.compiler/share/classes/module-info.java build/test/src/jdk.compiler
+
+mkdir -p build/test/out/java.compiler
+cp -r make/langtools/netbeans/nb-javac/build/classes/javax build/test/out/java.compiler/
+
+mkdir -p build/test/out/jdk.compiler
+cp -r make/langtools/netbeans/nb-javac/build/classes/com build/test/out/jdk.compiler/
+cp -r make/langtools/netbeans/nb-javac/build/classes/jdk build/test/out/jdk.compiler/
+rm -rf build/test/out/jdk.compiler/jdk/internal/Preview*
+rm -rf build/test/out/jdk.compiler/com/sun/tools/javap
+rm -rf build/test/out/jdk.compiler/com/sun/tools/classfile
+
+$BOOT_JAVA_HOME/bin/javac --module-source-path build/test/src/ -d build/test/out `find build/test/src/ -type f -name "*.java"`
+
+$BOOT_JAVA_HOME/bin/jmod create --class-path build/test/out/java.compiler/ build/test/modules/java.compiler.jmod
+
+mkdir -p build/test/expanded
+
+$BOOT_JAVA_HOME/bin/jmod extract --dir=build/test/expanded $BOOT_JAVA_HOME/jmods/jdk.compiler.jmod
+
+$BOOT_JAVA_HOME/bin/jmod create --class-path build/test/out/jdk.compiler/ --cmds build/test/expanded/bin/ --legal-notice build/test/expanded/legal/ --libs build/test/expanded/lib/ --module-version 15 build/test/modules/jdk.compiler.jmod
+echo "jmod success"
+$BOOT_JAVA_HOME/bin/jlink -p build/test/modules --add-modules ALL-MODULE-PATH --output build/test/jdk
+echo "checking build/test/jdk"
+if [ -s build/test/jdk ]; then
+      echo "direcotry build/test/jdk is present"
+fi;
+echo "jlink success"
diff --git a/src/jdk.compiler/share/classes/module-info.java b/src/jdk.compiler/share/classes/module-info.java
index 6026cdd..9af9e50 100644
--- a/src/jdk.compiler/share/classes/module-info.java
+++ b/src/jdk.compiler/share/classes/module-info.java
@@ -71,6 +71,7 @@
  */
 module jdk.compiler {
     requires transitive java.compiler;
+    requires java.logging;
 
     exports com.sun.source.doctree;
     exports com.sun.source.tree;
@@ -119,8 +120,8 @@ module jdk.compiler {
     uses com.sun.source.util.Plugin;
     uses com.sun.tools.javac.platform.PlatformProvider;
 
-    provides java.util.spi.ToolProvider with
-        com.sun.tools.javac.main.JavacToolProvider;
+//    provides java.util.spi.ToolProvider with
+//        com.sun.tools.javac.main.JavacToolProvider;
 
     provides com.sun.tools.javac.platform.PlatformProvider with
         com.sun.tools.javac.platform.JDKPlatformProvider;
